/**
 * @ngdoc overview
 * @name index
 * @description
 *
 * ##Getting started
 *
 * To use the SDK, you need to
 *
 * 1. init the SDK; e.g.,
 *
 * <pre>
 * FamilySearch.init({
 *   app_key: 'YOUR_ACCESS_KEY_GOES_HERE',
 *   environment: 'sandbox',
 *   // auth_callback is the URI you registered with FamilySearch;
 *   // the page does not need to exist but it must have the same host and port
 *   // as the server running your script
 *   auth_callback: 'REDIRECT_GOES_HERE',
 *   http_function: jQuery.ajax,
 *   deferred_function: jQuery.Deferred
 * });
 * </pre>
 *
 * 2. get an access token; e.g.,
 *
 * <pre>
 * FamilySearch.getAccessToken().then(function(response) {
 *    // now you have an access token
 * });
 * </pre>
 *
 * 3. make API calls; e.g.,
 *
 * <pre>
 * FamilySearch.getCurrentUser().then(function(response) {
 *    // now you have the response
 * });
 * </pre>
 *
 * ##Promises
 *
 * Most functions return promises.
 * The promises are generated by the `deferred_function` you passed into the `init` call.
 * If the promise is fulfilled, it will return a single parameter containing the response data.
 * If the response is rejected, it will return whatever the `http_function` passed into the `init` call returns.
 *
 * The following functions are also available
 *
 * - `getResponseHeader(header)`
 * - `getAllResponseHeaders()`
 * - `getStatusCode()`
 *
 * ###Examples
 *
 * ####jQuery
 *
 * Requires jQuery 1.8 or later.
 *
 * If you pass `jQuery.ajax` and `jQuery.Deferred` into the `FamilySearch.init` call, the returned promises
 * will have the the methods described at http://api.jquery.com/Types/#Promise ; for example
 *
 * - `then(function(data) {}, function(jqXHR, textStatus, errorThrown) {})`
 * - `done(function(data) {})`
 * - `fail(function(jqXHR, textStatus, errorThrown) {})`
 *
 * ####AngularJS -- not yet implemented
 *
 * If you pass `$http` and `$q.defer` into the `FamilySearch.init` call, the returned promises
 * will have the methods described at http://docs.angularjs.org/api/ng.$q#description_the-promise-api ; for example
 *
 * - `then(function(data) {}, function({data: data, status: status, headers: headers, config: config}) {})`
 * - `catch(function(data, status, headers, config) {})`
 *
 * ####Node.js -- not yet implemented
 *
 * ##Plumbing
 *
 * The functions in the "plumbing" module are low-level functions that you would not normally call.
 * The higher-level functions that you normally call are built on top of the plumbing functions.
 * The plumbing functions are exposed in case you want to do something not anticipated by the higher-level functions.
 * The plumbing functions here serve the same purpose as the
 * [plumbing functions in git](https://www.kernel.org/pub/software/scm/git/docs/#_low_level_commands_plumbing).
 *
 * Note that promises returned by plumbing functions return whatever the `http_function` passed into the
 * `init` call returns.
 *
 */
